---
description: 
globs: 
alwaysApply: true
---
Cursor AI Coding Rules for Chess Project

1. Commit and Push Behavior
- Do not automatically commit and push after every change.
- Only perform commit and push when explicitly instructed with the command: "commit and push".
- When committing:
  - Create a clear and descriptive commit message.
  - Use short but informative commit messages. Example commit messages:
    - "Add join game screen"
    - "Fix client connection issue"
    - "Refactor server communication"
- After committing, immediately push the changes to the remote GitHub repository.
- Do not bundle unrelated changes into a single commit. Each commit must represent a logical unit of work.

2. Code Comments
- All comments must be written in English.
- Write clear and concise comments explaining complex logic, function purposes, and important decisions.
- Example comment:
  // Connect to the server using the provided IP address
- Avoid unnecessary comments for obvious code.

3. Server Update and Deployment
- Only perform server deployment when explicitly instructed with the command: "deploy to server".
- Otherwise, always run and test the server application locally without uploading to the server.

- Server Deployment Steps (only when "deploy to server" is triggered):
  1. Rebuild the server application as a `.jar` file (chess-server.jar).
  2. Connect to the server using the following SSH command:
     ssh -i ~/.ssh/id_ed25519 ubuntu@141.147.25.123
  3. Copy the updated chess-server.jar file to the server:
     scp -i ~/.ssh/id_ed25519 chess-server.jar ubuntu@141.147.25.123:~/chess-server/
  4. SSH into the server:
     ssh -i ~/.ssh/id_ed25519 ubuntu@141.147.25.123
  5. Navigate to the server folder:
     cd ~/chess-server/
  6. Restart the server application using pm2:
     pm2 restart chess-server

- Always verify that the server is running properly after restarting.
- If there are any errors during deployment, fix them immediately before continuing client development.

4. General Best Practices
- Keep the code clean and well-organized.
- Follow consistent formatting (indentation, brackets, spacing).
- Prioritize readability over unnecessary complexity.
- If unsure about an implementation, prefer simple and maintainable solutions first, then optimize if needed.